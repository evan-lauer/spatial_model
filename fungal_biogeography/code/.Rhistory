test.elo<-elo[test.ind,] %>% data.frame()
sum(test.elo$id%in%train.elo$id)
xvars<-c(c("elo1","elo2","elo_prob1","line","total.line","week"),c(names(train.elo)[grepl("prev",names(train.elo))])) #,names(train.elo)[grepl("ratio",names(train.elo))]))
xvars<-xvars[!grepl("cv.",xvars)]
yvars<-c("cover.team1")
dim(train.elo)
dim(test.elo)
library(deepnet)
library(bartMachine)
train.elo<-train.elo[complete.cases(train.elo),]
test.elo<-test.elo[complete.cases(test.elo),]
y.train<-factor(train.elo[,yvars])
y.test<-factor(test.elo[,yvars])
x.train<-data.frame(as.matrix(sapply(train.elo[,xvars],as.numeric))) %>% as.matrix()
x.test<-data.frame(as.matrix(sapply(test.elo[,xvars],as.numeric))) %>% as.matrix()
x.train[is.infinite(x.train)]<-NA
x.test[is.infinite(x.test)]<-NA
x.train<-data.frame(x.train)
x.test<-data.frame(x.test)
x.train<-stats::model.matrix(~.^2,data=x.train) %>% data.frame()
x.test<-stats::model.matrix(~.^2,data=x.test) %>% data.frame()
x.train<-x.train[,-1]
x.test<-x.test[,-1]
x.train
colnames(x.train)<-gsub(":","",colnames(x.train))
colnames(x.test)<-gsub(":","",colnames(x.test))
load("~/Dropbox/nfl_image.RDS")
elo<-elo %>% filter(date>as.Date("2001-05-05")) %>% data.frame()
set.seed(20)
train.prop<-0.85
train.ind<-sample(1:nrow(elo),round(nrow(elo)*train.prop))
test.ind<-(1:nrow(elo))[!(1:nrow(elo))%in%train.ind]
train.elo<-elo[train.ind,] %>% data.frame()
test.elo<-elo[test.ind,] %>% data.frame()
sum(test.elo$id%in%train.elo$id)
xvars<-c(c("elo1","elo2","elo_prob1","line","total.line","week"),c(names(train.elo)[grepl("prev",names(train.elo))])) #,names(train.elo)[grepl("ratio",names(train.elo))]))
xvars<-xvars[!grepl("cv.",xvars)]
yvars<-c("cover.team1")
dim(train.elo)
dim(test.elo)
library(deepnet)
library(bartMachine)
train.elo<-train.elo[complete.cases(train.elo),]
test.elo<-test.elo[complete.cases(test.elo),]
y.train<-factor(train.elo[,yvars])
y.test<-factor(test.elo[,yvars])
x.train<-data.frame(as.matrix(sapply(train.elo[,xvars],as.numeric))) %>% as.matrix()
x.test<-data.frame(as.matrix(sapply(test.elo[,xvars],as.numeric))) %>% as.matrix()
x.train[is.infinite(x.train)]<-NA
x.test[is.infinite(x.test)]<-NA
x.train<-data.frame(x.train)
x.test<-data.frame(x.test)
x.train<-stats::model.matrix(~.^2,data=x.train) %>% data.frame()
x.test<-stats::model.matrix(~.^2,data=x.test) %>% data.frame()
x.train<-x.train[,-1]
x.test<-x.test[,-1]
names(x.train)<-gsub(":","",names(x.train))
names(x.test)<-gsub(":","",names(x.test))
options(java.parameters = "-Xmx35g")
res<-bartMachine(X=x.train,y=y.train,mem_cache_for_speed = T,num_trees = 50, num_burn_in = 1000,num_iterations_after_burn_in = 10000,use_missing_data = T)
pred.prob<-predict(res,new_data=x.test)
cutp<-0.5
res.tab<-table(as.numeric(pred.prob>0.5)[pred.prob>cutp | pred.prob<(1-cutp)],y.test[pred.prob>cutp | pred.prob<(1-cutp)])
sum(diag(res.tab))/sum(res.tab)
load("~/Dropbox/nfl_image.RDS")
elo<-elo %>% filter(date>as.Date("1992-05-05")) %>% data.frame()
set.seed(20)
train.prop<-0.85
train.ind<-sample(1:nrow(elo),round(nrow(elo)*train.prop))
test.ind<-(1:nrow(elo))[!(1:nrow(elo))%in%train.ind]
train.elo<-elo[train.ind,] %>% data.frame()
test.elo<-elo[test.ind,] %>% data.frame()
sum(test.elo$id%in%train.elo$id)
xvars<-c(c("elo1","elo2","elo_prob1","line","total.line","week"),c(names(train.elo)[grepl("prev",names(train.elo))])) #,names(train.elo)[grepl("ratio",names(train.elo))]))
xvars<-xvars[!grepl("cv.",xvars)]
yvars<-c("cover.team1")
dim(train.elo)
dim(test.elo)
library(deepnet)
library(bartMachine)
train.elo<-train.elo[complete.cases(train.elo),]
test.elo<-test.elo[complete.cases(test.elo),]
y.train<-factor(train.elo[,yvars])
y.test<-factor(test.elo[,yvars])
x.train<-data.frame(as.matrix(sapply(train.elo[,xvars],as.numeric))) %>% as.matrix()
x.test<-data.frame(as.matrix(sapply(test.elo[,xvars],as.numeric))) %>% as.matrix()
x.train[is.infinite(x.train)]<-NA
x.test[is.infinite(x.test)]<-NA
x.train<-data.frame(x.train)
x.test<-data.frame(x.test)
x.train<-stats::model.matrix(~.^2,data=x.train) %>% data.frame()
x.test<-stats::model.matrix(~.^2,data=x.test) %>% data.frame()
x.train<-x.train[,-1]
x.test<-x.test[,-1]
names(x.train)<-gsub(":","",names(x.train))
names(x.test)<-gsub(":","",names(x.test))
res<-bartMachine(X=x.train,y=y.train,mem_cache_for_speed = T,num_trees = 150, num_burn_in = 500,num_iterations_after_burn_in = 5000,use_missing_data = T)
pred.prob<-predict(res,new_data=x.test)
cutp<-0.5
res.tab<-table(as.numeric(pred.prob>0.5)[pred.prob>cutp | pred.prob<(1-cutp)],y.test[pred.prob>cutp | pred.prob<(1-cutp)])
sum(diag(res.tab))/sum(res.tab)
cutp<-0.55
res.tab<-table(as.numeric(pred.prob>0.5)[pred.prob>cutp | pred.prob<(1-cutp)],y.test[pred.prob>cutp | pred.prob<(1-cutp)])
sum(diag(res.tab))/sum(res.tab)
cutp<-0.6
res.tab<-table(as.numeric(pred.prob>0.5)[pred.prob>cutp | pred.prob<(1-cutp)],y.test[pred.prob>cutp | pred.prob<(1-cutp)])
sum(diag(res.tab))/sum(res.tab)
rm(list=ls())
library(tidyverse)
library(caret)
library(rgp)
library(e1071)
library(PlayerRatings)
library(rpart)
library(openxlsx)
setwd("~/Git/nfl/Code")
options(stringsAsFactors = F)
### FIRST CHOOSE LINES TO USE
use_line<-"line"
# use_line<-"line_pinn"
# use_line<-"line_bovada"
use_total<-"total_line"
# use_total<-"total_bovada"
get_predictions<-function(use_line="line",use_total="total_line",base="../"){
nli<-read.csv("../nfllines/nfl2017lines.csv",header=T)
nli$Date<-as.Date(nli$Date,format="%m/%d/%Y")
nli$Line<-nli[,names(nli)==use_line]
nli$Total.Line<-nli[,names(nli)==use_total]
############# NOTE THAT IN NEW 2017 DATASET, THE LINE IS THE NEGATIVE AMOUNT THAT THE
############  HOME SHOULD WIN BY!!!!! THIS LINE FLIPS THAT BACK
nli <- nli %>% dplyr::select(c(Date,Visitor,Home.Team,Visitor.Score,Home.Score,Line,Total.Line)) %>% mutate(Line=-Line)
nli$uid<-apply(cbind(as.character(nli$Date),t(apply(cbind(nli$Home.Team,nli$Visitor),1,sort))),1,paste,collapse=".")
nli.oo<-nli
# vis is fav
fdog<-nli %>% rename(fav=Visitor,dog=Home.Team,fav_score=Visitor.Score,dog_score=Home.Score,line=Line,total_line=Total.Line,date=Date) %>% mutate(line=-line,fav_home=0)
# home is fav
fdog2<-nli %>% rename(dog=Visitor,fav=Home.Team,dog_score=Visitor.Score,fav_score=Home.Score,line=Line,total_line=Total.Line,date=Date) %>% mutate(fav_home=1)
##home is fav
nli<-rbind(fdog2[nli$Line>=0,],fdog[nli$Line<0,])
nli<-nli %>% mutate(total=fav_score+dog_score)%>%mutate(fav_score_adj=fav_score-line)%>%mutate(fav_cover=as.numeric(fav_score_adj>=dog_score))%>%
mutate(over=as.numeric(total>total_line))%>%mutate(fav_win=as.numeric(fav_score>dog_score))%>%mutate(fav_cover_amount=fav_score_adj-dog_score)%>%
mutate(home_cover= as.numeric((fav_cover & fav_home) | (!fav_cover & !fav_home)),fav_win_amount=fav_score-dog_score,over_amount=total-total_line)%>%
mutate(home_win=as.numeric((fav_home & fav_win) | (!fav_home & !fav_win)))
nli$fav_cover[nli$line==nli$fav_cover_amount]<-0.5
nli$year<-as.numeric(format(nli$date,"%Y"))
nli$month<-as.numeric(format(nli$date,"%m"))
nli$doy<-as.numeric(format(nli$date,"%j"))
nli<-nli[order(nli$date),]
nli$week<-NA
nli$season<-0
nli$date_numeric<-as.numeric(nli$date)
yrs<-sort(unique(nli$year))
start_date<-as.Date('04-01-1950','%d-%m-%Y')
date_seq<-seq(0,365*100,by=7)
week_ends<-start_date+date_seq
sum(weekdays(week_ends)!="Wednesday")
week_num<-seq(1,length(week_ends))
for(i in 1:(length(week_ends)-1)){
nli$week_ref[nli$date>=week_ends[i] & nli$date<week_ends[i+1]]<-week_num[i]
}
sum(is.na(nli$week_ref))
for(i in yrs){
subs1<-(nli$month>6 & nli$year==i)
subs2<-(nli$month<6 & nli$year==i+1)
if(sum(subs1)==0 & sum(subs2)>0){
print("something went wrong")
break()
}
if(sum(subs1)>0){
rowkeep<-seq(1:nrow(nli))[subs1 | subs2]
nli$doy[subs2]<-nli$doy[subs2]+365
nli$week[rowkeep]<-nli$week_ref[rowkeep]-min(nli$week_ref[subs1])+1
nli$season[subs1 | subs2]<-i
}
}
seas<-sort(unique(nli$season))
weeks<-sort(unique(nli$week))
all_dat<-NULL
for(i in seas){
for(j in weeks){
if(j!=1){
## get win rankings
## get win rankings
print(c(i,j))
tdat<-nli %>% filter(season==i & week<j)  ## everything before this week
tdat2<-nli %>% filter(season==i & week==j)
if(nrow(tdat2)>0){
tdat2<-tdat2 %>%dplyr::select(c(uid,date,dog,fav,line,total_line,fav_home,fav_cover,fav_cover_amount,fav_win_amount,season,week,doy))
# fun.win<-data.frame(Week=tdat$week,HomeTeam=as.character(tdat$fav),AwayTeam=as.character(tdat$dog),Score=tdat$home_win)
# fun.win[,sapply(fun.win,is.factor)]<-sapply(fun.win[,sapply(fun.win,is.factor)],as.character)
# el.win<-elo(fun.win,gamma=35)$ratings
#
## get cover rankings
fun.win<-data.frame(Week=tdat$week,HomeTeam=as.character(tdat$fav),AwayTeam=as.character(tdat$dog),Score=tdat$fav_cover)
fun.win[,sapply(fun.win,is.factor)]<-sapply(fun.win[,sapply(fun.win,is.factor)],as.character)
fun.win$Score[tdat$fav_cover_amount==0]<-0.5
el.fav.cover<-elo(fun.win,gamma=0)$ratings
## did the home cover
# fun.win<-data.frame(Week=tdat$week,HomeTeam=as.character(tdat$fav),AwayTeam=as.character(tdat$dog),Score=tdat$home_cover)
# fun.win[,sapply(fun.win,is.factor)]<-sapply(fun.win[,sapply(fun.win,is.factor)],as.character)
# fun.win$Score[tdat$fav_cover_amount==0]<-0.5
# el.home.cover<-elo(fun.win,gamma=70)$ratings
## did the favorite win
fun.win<-data.frame(Week=tdat$week,HomeTeam=as.character(tdat$fav),AwayTeam=as.character(tdat$dog),Score=tdat$fav_win)
fun.win[,sapply(fun.win,is.factor)]<-sapply(fun.win[,sapply(fun.win,is.factor)],as.character)
fun.win$Score[tdat$fav_cover_amount==0]<-0.5
el.fav.win<-elo(fun.win,gamma=70)$ratings
## merge win outcomes
el.win<-el.fav.win%>%mutate(ranking=1:nrow(el.fav.win),pct=Win/(Win+Loss+Draw)) %>% dplyr::select(c(Player,Rating,Win,pct,ranking))%>%rename(rating=Rating,win=Win)
el.win.h<-el.win[match(tdat2$fav,el.win$Player),]%>%dplyr::select(-Player)
el.win.v<-el.win[match(tdat2$dog,el.win$Player),]%>%dplyr::select(-Player)
el.win.diff<-el.win.h-el.win.v
el.win.ratio<-el.win.h/(el.win.v+.00001)
names(el.win.h)<-paste("fav_",names(el.win.h),"_win",sep="")
names(el.win.v)<-paste("dog_",names(el.win.v),"_win",sep="")
names(el.win.diff)<-paste("fav_",names(el.win.diff),"_win_diff",sep="")
names(el.win.ratio)<-paste("dog_",names(el.win.ratio),"_win_ratio",sep="")
tdat2<-cbind(tdat2,cbind(el.win.h,el.win.v,el.win.diff,el.win.ratio))
## merge cover outcomes
el.cover<-el.fav.cover%>%mutate(ranking=1:nrow(el.fav.cover),pct=Win/(Win+Loss+Draw)) %>% dplyr::select(c(Player,Rating,Win,pct,ranking))%>%rename(rating=Rating,win=Win)
el.cover.h<-el.cover[match(tdat2$fav,el.cover$Player),]%>%dplyr::select(-Player)
el.cover.v<-el.cover[match(tdat2$dog,el.cover$Player),]%>%dplyr::select(-Player)
el.cover.diff<-el.cover.h-el.cover.v
el.cover.ratio<-el.cover.h/(el.cover.v+.00001)
names(el.cover.h)<-paste("fav_",names(el.cover.h),"_cover",sep="")
names(el.cover.v)<-paste("dog_",names(el.cover.v),"_cover",sep="")
names(el.cover.diff)<-paste("fav_",names(el.cover.diff),"_cover_diff",sep="")
names(el.cover.ratio)<-paste("dog_",names(el.cover.ratio),"_cover_ratio",sep="")
tdat2<-cbind(tdat2,cbind(el.cover.h,el.cover.v,el.cover.diff,el.cover.ratio))
all_dat<-rbind(all_dat,tdat2)
}
}
}
}
nst<-all_dat
get_lag_weeks<-function(nli,nst,lag_val,func_use,name_append=NA){
seas<-sort(unique(nli$season))
weeks<-sort(unique(nli$week))
all_dat<-NULL
if(identical(func_use,mean)){
name_append<-"mean"
}
if(identical(func_use,var)){
name_append<-"var"
}
if(identical(func_use,median)){
name_append<-"median"
}
if(identical(func_use,min)){
name_append<-"min"
}
if(identical(func_use,max)){
name_append<-"max"
}
if(identical(func_use,sd)){
name_append<-"sd"
}
if(is.na(name_append)){
print("you have to give a function name")
break()
}
for(i in seas){
for(j in weeks){
## get win rankings
if(j>1){
res_mat<-data.frame(matrix(0,nrow=lag_val,ncol=4))
tdat2<-nst %>% filter(season==i & week==j)
if(nrow(tdat2)>0){
for(k in max(1,(j-lag_val)):(j-1)){
if(k>=j){
print("fucked up")
break()
}
print(c(i,j))
tdat<-nli %>% filter(season==i & week==k)  ## everything before this week
if(nrow(tdat)>0){
res_mat[k-(j-lag_val)+1,1]<-sum(tdat$fav_cover,na.rm=T)/length(tdat$fav_cover) #fav_cover_pct<-
res_mat[k-(j-lag_val)+1,2]<-sum(tdat$fav_cover_amount,na.rm=T)/length(tdat$fav_cover_amount)   #fav_cover_avg
res_mat[k-(j-lag_val)+1,3]<-sum(tdat$over,na.rm=T)/length(tdat$over)       #over_pct<-
res_mat[k-(j-lag_val)+1,4]<-sum(tdat$over_amount,na.rm=T)/length(tdat$over_amount)  #over_avg
# tdat2$failed_cover_weight<-sum(as.numeric(!tdat2$fav_cover)*(33-tdat2$fav_ranking_cover),na.rm=T)/sum((33-tdat2$fav_ranking_cover),na.rm=T)
}
}
res_vec<-data.frame(t(replicate(nrow(tdat2),as.numeric(apply(res_mat,2,func_use,na.rm=T)))))
res_vec[is.na(res_vec)]<-0
names(res_vec)<-paste(c("fav_cover_pct","fav_cover_avg","over_pct","over_avg"),"_lag_",lag_val,"_",name_append,sep="")
tdat2<-cbind(tdat2,res_vec)
all_dat<-rbind(all_dat,tdat2)
}
}
}
}
return(all_dat)
}
nst<-get_lag_weeks(nli,nst,lag_val=1,func_use=median)
nst<-get_lag_weeks(nli,nst,lag_val=2,func_use=median)
nst<-get_lag_weeks(nli,nst,lag_val=3,func_use=median)
nst<-get_lag_weeks(nli,nst,lag_val=5,func_use=median)
nst<-get_lag_weeks(nli,nst,lag_val=10,func_use=median)
nst<-get_lag_weeks(nli,nst,lag_val=1,func_use=mean)
nst<-get_lag_weeks(nli,nst,lag_val=2,func_use=mean)
nst<-get_lag_weeks(nli,nst,lag_val=3,func_use=mean)
nst<-get_lag_weeks(nli,nst,lag_val=5,func_use=mean)
nst<-get_lag_weeks(nli,nst,lag_val=10,func_use=mean)
nst<-get_lag_weeks(nli,nst,lag_val=1,func_use=min)
nst<-get_lag_weeks(nli,nst,lag_val=1,func_use=max)
nst<-get_lag_weeks(nli,nst,lag_val=3,func_use=min)
nst<-get_lag_weeks(nli,nst,lag_val=3,func_use=max)
nst<-get_lag_weeks(nli,nst,lag_val=5,func_use=min)
nst<-get_lag_weeks(nli,nst,lag_val=5,func_use=max)
nst<-get_lag_weeks(nli,nst,lag_val=3,func_use=var)
nst<-get_lag_weeks(nli,nst,lag_val=5,func_use=var)
nst<-get_lag_weeks(nli,nst,lag_val=10,func_use=var)
fsv<-readRDS("../Models_Rdata/svm_model_good.RDS")
fsv.cont<-readRDS("../Models_Rdata/svm_model_good_cont.RDS")
fill.mean<-function(x){
if(is.numeric(x[1])){
x[is.na(x)]<-mean(x,na.rm=T)
return(as.numeric(x))
}
else{
return(x)
}
}
### fill in missing with mean
num.rows<-sapply(nst,is.numeric)
for(i in 1:ncol(nst)){
if(num.rows[i]){
tmp<-nst[,i]
tmp[is.na(tmp)]<-mean(tmp,na.rm=T)
nst[,i]<-tmp
}
}
pvals<-as.numeric(predict(fsv,nst%>% dplyr::select(-c(fav_cover,fav_cover_amount,fav_win_amount)),probability=F))-1
pv.cont<-predict(fsv.cont,nst %>% dplyr::select(-c(fav_cover,fav_cover_amount,fav_win_amount)))
pvals.cont<-as.numeric(pv.cont>0)
pv<-attr(predict(fsv,nst%>% dplyr::select(-c(fav_cover,fav_cover_amount,fav_win_amount)),probability=T),"probabilities")[,1]
out.data<-data.frame(uid=nst$uid,pred_bin=pvals,pred_cont=pvals.cont,prob_cover=pv,amount_cover=pv.cont)
out.data$Visitor<-nli.oo$Visitor[match(out.data$uid,nli.oo$uid)]
out.data$Home.Team<-nli.oo$Home.Team[match(out.data$uid,nli.oo$uid)]
out.data$fav_home<-I(nli.oo$Line[match(out.data$uid,nli.oo$uid)]>0)
out.data$date<-nli.oo$Date[match(out.data$uid,nli.oo$uid)]
qu.cont75<-quantile(predict(fsv.cont),probs=c(0.25,0.75))
qu.cont85<-quantile(predict(fsv.cont),probs=c(0.15,0.85))
qu.cont95<-quantile(predict(fsv.cont),probs=c(0.05,0.95))
out.data$conf_75<-c("Yes","-")[match(I(out.data$amount_cover>qu.cont75[2] | out.data$amount_cover<qu.cont75[1]),c(TRUE,FALSE))]
out.data$conf_85<-c("Yes","-")[match(I(out.data$amount_cover>qu.cont85[2] | out.data$amount_cover<qu.cont85[1]),c(TRUE,FALSE))]
out.data$conf_95<-c("Yes","-")[match(I(out.data$amount_cover>qu.cont95[2] | out.data$amount_cover<qu.cont95[1]),c(TRUE,FALSE))]
all.pred<-predict(fsv.cont)
out.data$greater_than<-sapply(out.data$amount_cover,function(x){sum(all.pred>x)/length(all.pred)})
out.data$less_than<-sapply(out.data$amount_cover,function(x){sum(all.pred<x)/length(all.pred)})
b<-10/11
p<-apply(cbind(out.data$greater_than,out.data$less_than),1,function(x){1-min(x)})
q<-1-p
out.data$wager<-(b*p-q)/b
out.data.flip<-out.data %>% mutate(pred_bin=1-pred_bin,pred_cont=1-pred_cont,prob_cover=1-prob_cover,amount_cover=-amount_cover)
out_comb<-rbind(out.data[out.data$fav_home==TRUE,],out.data.flip[out.data.flip$fav_home==FALSE,]) %>% dplyr::select(c(uid,date,Visitor,Home.Team,pred_bin,pred_cont,prob_cover,amount_cover,conf_75,conf_85,conf_95,wager))
get.ord<-nli.oo$uid[nli.oo$uid%in%out_comb$uid]
out_comb<-out_comb[match(get.ord,out_comb$uid),]
return(out_comb)
}
rm(list=ls())
options(stringsAsFactors=F)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library(dplyr)
library(relaimpo)
library(tidyverse)
library(raster)
library(car)
# read in various functions for cleaning/plotting data
source("misc_functions.R")
# read in the data
comb<-read_csv("../fungi_data/Fungal_climate_data.csv") %>% data.frame()
# scale the variables to be within [0,1]
comb$temp01<-scale01(comb$temp.niche.width)
comb$water01<-scale01(comb$water.niche.width)
comb$tw01<-scale01(comb$temp01*comb$water01)
# create the trade-off variables
comb <- comb %>% mutate(dom_tol=ranking-tw01)  %>%
mutate(tdom_tol=ranking-temp01)  %>%
mutate(wdom_tol=ranking-water01)  %>%
mutate(water01=sqrt(water01)) %>%
mutate(temp01=sqrt(temp01)) %>%
mutate(ranking=sqrt(ranking))
# main regression models
summary(fit1.s<-lm(ranking~     PC2.p + PC3.p +  PC2.t +    a.gal + a.tab + m.tre + p.fla + p.ruf,data=comb))
summary(fit2.s<-lm(dom_tol~     PC2.p + PC3.p +  PC2.t +    a.gal +         m.tre + p.fla + p.ruf,data=comb))
summary(fit3.s<-lm(tdom_tol~    PC2.p + PC3.p +  PC2.t +    a.gal +                 p.fla + p.ruf,data=comb))
summary(fit4.s<-lm(wdom_tol~    PC2.p + PC3.p +  PC2.t +    a.gal +         m.tre + p.fla + p.ruf,data=comb))
summary(fit5.s<-lm(temp01~      PC2.p + PC3.p +  PC2.t +    a.gal                                ,data=comb))
summary(fit6.s<-lm(water01~     PC2.p + PC3.p +  PC2.t +    a.gal                                ,data=comb))
# fit corresponding null models (keeping species indictors) to quantify relative importance of environmental variables
summary(fit10<-lm(ranking~                                  a.gal + a.tab + m.tre + p.fla + p.ruf,data=comb))
summary(fit20<-lm(dom_tol~                                  a.gal +         m.tre + p.fla + p.ruf,data=comb))
summary(fit30<-lm(tdom_tol~                                 a.gal +                 p.fla + p.ruf,data=comb))
summary(fit40<-lm(wdom_tol~                                 a.gal +         m.tre + p.fla + p.ruf,data=comb))
summary(fit50<-lm(temp01~                                   a.gal                                ,data=comb))
summary(fit60<-lm(water01~                                  a.gal                                ,data=comb))
library(lmtest)
## overall test of environmental variables
print(l1<-anova(fit1.s,fit10))
print(l2<-anova(fit2.s,fit20))
print(l3<-anova(fit3.s,fit30))
print(l4<-anova(fit4.s,fit40))
print(l5<-anova(fit5.s,fit50))
print(l6<-anova(fit6.s,fit60))
# confidence intervals
confint(fit2.s)
confint(fit3.s)
confint(fit4.s)
confint(fit1.s)
confint(fit5.s)
confint(fit6.s)
# get adjusted R2 attributable to the climate PCAs
relimp_group(fit2.s,c("PC2.p","PC3.p","PC2.t"))
relimp_group(fit3.s,c("PC2.p","PC3.p","PC2.t"))
relimp_group(fit4.s,c("PC2.p","PC3.p","PC2.t"))
relimp_group(fit1.s,c("PC2.p","PC3.p","PC2.t"))
relimp_group(fit5.s,c("PC2.p","PC3.p","PC2.t"))
relimp_group(fit6.s,c("PC2.p","PC3.p","PC2.t"))
# model AIC
AIC(fit2.s,fit3.s,fit4.s)
AIC(fit1.s,fit5.s,fit6.s)
#################################################3
########################################################
################## phylogenetic regression
# libraries
library(ape)
library(caper)
library(geiger)
library(phytools)
library(phangorn)
library(nlme)
library(dplyr)
comb.scale<-comb.scale.o<-comb
# get tree (shortcut)
tree.fungi <- read.newick("../fungi_data/phylogenetic_tree.txt")
is.ultrametric(tree.fungi)
tree.fungi <- collapse.singles(tree.fungi)
plot(tree.fungi, cex=1)
# match species in data file and tree
row.names(comb.scale.o) <- comb.scale.o$gen.name2  # make species names row names
name.check(tree.fungi, comb.scale.o)
spec_inds<-c("a.gal","a.tab","h.set","m.tre","p.fla","p.rob","p.ruf","s.com")
set.seed(20)
### fit the models allowing lambda to vary
summary(g1 <- gls(trim_formula(fit1.s,spec_inds), correlation=corPagel(value=1, phy=tree.fungi), data=comb.scale.o,method='REML'))
summary(g2 <- gls(trim_formula(fit2.s,spec_inds), correlation=corPagel(value=1, phy=tree.fungi), data=comb.scale.o,method='REML'))
summary(g3 <- gls(trim_formula(fit3.s,spec_inds), correlation=corPagel(value=1, phy=tree.fungi), data=comb.scale.o,method='REML'))
summary(g4 <- gls(trim_formula(fit4.s,spec_inds), correlation=corPagel(value=1, phy=tree.fungi), data=comb.scale.o,method='REML'))
summary(g5 <- gls(trim_formula(fit5.s,spec_inds), correlation=corPagel(value=1, phy=tree.fungi), data=comb.scale.o,method='REML'))
summary(g6 <- gls(trim_formula(fit6.s,spec_inds), correlation=corPagel(value=1, phy=tree.fungi), data=comb.scale.o,method='REML'))
# force lambda to be zero
g1.lam <- gls(trim_formula(fit1.s,spec_inds), correlation=corPagel(value=0, phy=tree.fungi,fixed=T), data=comb.scale.o,method='REML')
g2.lam <- gls(trim_formula(fit2.s,spec_inds), correlation=corPagel(value=0, phy=tree.fungi,fixed=T), data=comb.scale.o,method='REML')
g3.lam <- gls(trim_formula(fit3.s,spec_inds), correlation=corPagel(value=0, phy=tree.fungi,fixed=T), data=comb.scale.o,method='REML')
g4.lam <- gls(trim_formula(fit4.s,spec_inds), correlation=corPagel(value=0, phy=tree.fungi,fixed=T), data=comb.scale.o,method='REML')
g5.lam <- gls(trim_formula(fit5.s,spec_inds), correlation=corPagel(value=0, phy=tree.fungi,fixed=T), data=comb.scale.o,method='REML')
g6.lam <- gls(trim_formula(fit6.s,spec_inds), correlation=corPagel(value=0, phy=tree.fungi,fixed=T), data=comb.scale.o,method='REML')
# test of lambda=0, can use reml since the fixed parts are the same
print(gt2<-anova(g2,g2.lam))
print(gt3<-anova(g3,g3.lam))
print(gt4<-anova(g4,g4.lam))
print(gt1<-anova(g1,g1.lam))
print(gt5<-anova(g5,g5.lam))
print(gt6<-anova(g6,g6.lam))
# view lambda
as.numeric(attr(g2$apVar,"Pars")[1])
as.numeric(attr(g3$apVar,"Pars")[1])
as.numeric(attr(g4$apVar,"Pars")[1])
as.numeric(attr(g1$apVar,"Pars")[1])
as.numeric(attr(g5$apVar,"Pars")[1])
as.numeric(attr(g6$apVar,"Pars")[1])
# get AIC
AIC(update(g2,method="ML"),fit2.s)
AIC(update(g3,method="ML"),fit3.s)
AIC(update(g4,method="ML"),fit4.s)
AIC(update(g1,method="ML"),fit1.s)
AIC(update(g5,method="ML"),fit5.s) # note, ML won't converge due to < lambda
AIC(update(g6,method="ML"),fit6.s)
##############################################
#########           MAKING MAPS
##############################################
library(sp)
library(ggfortify)
library(ggpolypath)
library(PBSmapping)
library(ggplot2)
library(colorRamps)
library(cowplot)
library(colorspace)
library(viridis)
# set the bounds
lat_lim<-c(0,70)
lon_lim<-c(-155,-50)
# read in climate data
bstack.o<-brick("../geo_data/biome_stack.tif")
lake<-shapefile("../geo_data/lakes/ne_10m_lakes.shp")
ocean<-shapefile("../geo_data/oceans/ne_10m_ocean.shp")
kc0 <- raster("../geo_data/koppen_climate.grd")
forest_mask<-raster("../geo_data/Forest_mask_layer.tif")
climate.pca<-read_csv("../geo_data/bioclim_PCA_variables.csv") %>% mutate(x=long,y=lat) %>% data.frame()
# clean up the layers
lake_fortify<-fortify(lake) %>% dplyr::rename(X=long, Y=lat, PID=group, POS=order) %>% mutate(piece=as.numeric(piece),PID=as.numeric(PID))
ocean_fortify<-fortify(ocean) %>% dplyr::rename(X=long, Y=lat, PID=group, POS=order) %>% mutate(piece=as.numeric(piece),PID=as.numeric(PID))
rdat<-rdat[complete.cases(rdat),]
clim_ord <- c('Af', 'Am', 'As', 'Aw', 'BSh', 'BSk', 'BWh', 'BWk', 'Cfa', 'Cfb','Cfc', 'Csa', 'Csb', 'Csc', 'Cwa','Cwb', 'Cwc', 'Dfa', 'Dfb', 'Dfc','Dfd', 'Dsa', 'Dsb', 'Dsc', 'Dsd','Dwa', 'Dwb', 'Dwc', 'Dwd', 'EF','ET', 'Ocean')
use_clim<-c("Aw","Am","Af","Cfa","Cfb","Dfa","Dfb")
keep_clim<-(1:length(clim_ord))[clim_ord%in%use_clim]
gg3<-plot_fig(mod=fit3.s,climate.pca=climate.pca, bstack.o=bstack.o, kc0=kc0, forest_mask=forest_mask, lake_fortify=lake_fortify, ocean_fortify=ocean_fortify,scale_func=scale11)
gg3av<-av_gg(fit3.s,"PC3.p",xlab="Climate PCA 1")
plot_grid(gg3av,gg3,rel_widths=c(.7,1),labels="AUTO")
